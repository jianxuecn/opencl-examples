# Prepare Qt

option(USE_QT5 "Use Qt5 for GUI." ON)
if(USE_QT5)
  set(USE_QT5_01 1)
  if(Qt5_INSTALL_DIR)
    set(Qt5_DIR "${Qt5_INSTALL_DIR}/lib/cmake/Qt5")
  endif()
else(USE_QT5)
  set(USE_QT5_01 0)
endif(USE_QT5)

macro(PREPARE_QT4 MINIMUM_VERSION)
  set(_MODULE_NAMES ${ARGN})
  set(QT_VER 4)
  foreach(_MODULE_NAME ${_MODULE_NAMES})
    list(APPEND _QT_MODULE_NAMES "Qt${_MODULE_NAME}")
    if(WIN32)
      list(APPEND QT_USED_DLL_NAMES "${_MODULE_NAME}")
    endif(WIN32)
  endforeach(_MODULE_NAME)
  find_package(Qt4 ${MINIMUM_VERSION} REQUIRED ${_QT_MODULE_NAMES})
  if(NOT QT4_FOUND)
    message(FATAL_ERROR "Cannot find Qt ${MINIMUM_VERSION} or greater!")
    set(QT_PREPARED FALSE)
  else(NOT QT4_FOUND)
    include(${QT_USE_FILE})
    set(QT_USED_DLL_DIR ${QT_BINARY_DIR})
    if(QT4_NO_LINK_QTMAIN)
      set(QT_USED_LIBRARIES ${QT_LIBRARIES})
    else(QT4_NO_LINK_QTMAIN)
      set(QT_USED_LIBRARIES ${QT_LIBRARIES} ${QT_QTMAIN_LIBRARY})
    endif(QT4_NO_LINK_QTMAIN)
    set(QT_PREPARED TRUE)
  endif(NOT QT4_FOUND)
endmacro(PREPARE_QT4)

macro(PREPARE_QT5)
  #set(QT5_DIR "" CACHE PATH "Qt 5 directory.")
  #set(CMAKE_PREFIX_PATH ${QT5_DIR} ${CMAKE_PREFIX_PATH})
  #if(WIN32)
    #find_package(WindowsSDK QUIET)
    #if(WINSDK_FOUND)
    #  message(STATUS "WINSDK_DIR: ${WINSDK_DIR}!")
    #  set(CMAKE_PREFIX_PATH ${WINSDK_DIR} ${CMAKE_PREFIX_PATH})
    #endif(WINSDK_FOUND)
  #endif(WIN32)
  #set(CMAKE_AUTOMOC ON)
  #set(CMAKE_INCLUDE_CURRENT_DIR ON)
  set(_MODULE_NAMES ${ARGN})
  find_package(Qt5 REQUIRED COMPONENTS ${_MODULE_NAMES})
  set(QT_VER 5)
  foreach(_MODULE_NAME ${_MODULE_NAMES})
    list(APPEND _QT_MODULE_NAMES "Qt5${_MODULE_NAME}")
    if(NOT "${_MODULE_NAME}" MATCHES "LinguistTools")
      #message(STATUS "${_MODULE_NAME}!")
      list(APPEND QT_USED_LIBRARIES "Qt5::${_MODULE_NAME}")
      if(WIN32)
        list(APPEND QT_USED_DLL_NAMES "${_MODULE_NAME}")
      endif(WIN32)
    endif()
  endforeach(_MODULE_NAME)
  
  #set(QT5_FOUND TRUE)
  #foreach(_QT_MODULE_NAME ${_QT_MODULE_NAMES})
  #  find_package(${_QT_MODULE_NAME})
  #  if(NOT ${_QT_MODULE_NAME}_FOUND)
  #    set(QT5_FOUND FALSE)
  #    message(FATAL_ERROR "${_QT_MODULE_NAME} not found!")
  #  endif(NOT ${_QT_MODULE_NAME}_FOUND)
  #endforeach(_QT_MODULE_NAME)

  if(NOT Qt5_FOUND)
    message(FATAL_ERROR "Cannot prepare Qt 5!")
    set(QT_PREPARED FALSE)
  else(NOT Qt5_FOUND)
    set(QT_PREPARED TRUE)
    set(QT_PLUGINS_DIR ${Qt5_INSTALL_DIR}/plugins)
    set(QT_LIBRARY_DIRS ${Qt5_INSTALL_DIR}/lib)
    set(QT_USED_DLL_DIR ${Qt5_INSTALL_DIR}/bin)
    set(QT_TRANSLATIONS_DIR ${Qt5_INSTALL_DIR}/translations)
    #QT5_USE_MODULES(${TARGETNAME} ${_MODULE_NAMES})
    #message(STATUS "QT_LIBRARY_DIRS: " ${QT_LIBRARY_DIRS})
  endif(NOT Qt5_FOUND)
  #get_target_property(UIC_LOCATION Qt5::uic IMPORTED_LOCATION)
  #message(STATUS "UIC_LOCATION: " ${UIC_LOCATION})
endmacro(PREPARE_QT5)

function(QT_WRAP_CPP_NEW outfiles)
  if(USE_QT5)
    QT5_WRAP_CPP(${outfiles} ${ARGN})
  else(USE_QT5)
    QT4_WRAP_CPP(${outfiles} ${ARGN})
  endif(USE_QT5)
  set(${outfiles} ${${outfiles}} PARENT_SCOPE)
endfunction(QT_WRAP_CPP_NEW)

function(QT_WRAP_UI_NEW outfiles)
  if(USE_QT5)
    QT5_WRAP_UI(${outfiles} ${ARGN})
  else(USE_QT5)
    QT4_WRAP_UI(${outfiles} ${ARGN})
  endif(USE_QT5)
  set(${outfiles} ${${outfiles}} PARENT_SCOPE)
endfunction(QT_WRAP_UI_NEW)

function(QT_ADD_TRANSLATION_NEW outfiles)
  if(USE_QT5)
    QT5_ADD_TRANSLATION(${outfiles} ${ARGN})
  else(USE_QT5)
    QT4_ADD_TRANSLATION(${outfiles} ${ARGN})
  endif(USE_QT5)
  set(${outfiles} ${${outfiles}} PARENT_SCOPE)
endfunction(QT_ADD_TRANSLATION_NEW)

function(QT_ADD_RESOURCES_NEW outfiles)
  if(USE_QT5)
    QT5_ADD_RESOURCES(${outfiles} ${ARGN})
  else(USE_QT5)
    QT4_ADD_RESOURCES(${outfiles} ${ARGN})
  endif(USE_QT5)
  set(${outfiles} ${${outfiles}} PARENT_SCOPE)
endfunction(QT_ADD_RESOURCES_NEW)

