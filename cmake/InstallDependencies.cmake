#####################################################
# Install dependencies on Windows
#####################################################
if(CMAKE_CL_64)
  set(ARCH_DIR "x64")
else(CMAKE_CL_64)
  set(ARCH_DIR "x86")
endif(CMAKE_CL_64)
if(MSVC12)
  set(MSVCVER 120)
  set(VCREDIST_DLL_DIR ${VCREDIST_DIR}/2013/${ARCH_DIR})
elseif(MSVC10)
  set(MSVCVER 100)
  set(VCREDIST_DLL_DIR ${VCREDIST_DIR}/2010/${ARCH_DIR})
elseif(MSVC90)
  set(MSVCVER 90)
  set(VCREDIST_DLL_DIR ${VCREDIST_DIR}/2008/${ARCH_DIR})
endif()

function(install_external_dll DEBUG_FILEPATH RELEASE_FILEPATH DEBUG_FILENAME RELEASE_FILENAME)
  if(EXISTS ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll)
    configure_file(${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll ${PROJECT_BINARY_DIR}/bin/Debug/${DEBUG_FILENAME}.dll COPYONLY)
	#file(COPY ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll DESTINATION ${PROJECT_BINARY_DIR}/bin/Debug)
    install(FILES ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll DESTINATION Debug CONFIGURATIONS Debug)
	message(STATUS "Copy DLL: " ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll)
  endif(EXISTS ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll)
  if(EXISTS ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll)
    configure_file(${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll ${PROJECT_BINARY_DIR}/bin/Release/${RELEASE_FILENAME}.dll COPYONLY)
    configure_file(${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll ${PROJECT_BINARY_DIR}/bin/RelWithDebInfo/${RELEASE_FILENAME}.dll COPYONLY)
    configure_file(${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll ${PROJECT_BINARY_DIR}/bin/MinSizeRel/${RELEASE_FILENAME}.dll COPYONLY)
    install(FILES ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll DESTINATION . CONFIGURATIONS Release)
    install(FILES ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll DESTINATION RelWithDebInfo CONFIGURATIONS RelWithDebInfo)
    install(FILES ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll DESTINATION MinSizeRel CONFIGURATIONS MinSizeRel)	
	message(STATUS "Copy DLL: " ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll)
  endif(EXISTS ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll)
endfunction(install_external_dll)

function(install_external_plugin_dll DEBUG_FILEPATH RELEASE_FILEPATH DEBUG_FILENAME RELEASE_FILENAME PLUGIN_SUB_DIR)
  if(EXISTS ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll)
    configure_file(${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll ${PROJECT_BINARY_DIR}/bin/Debug/${PLUGIN_SUB_DIR}/${DEBUG_FILENAME}.dll COPYONLY)
	#file(COPY ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll DESTINATION ${PROJECT_BINARY_DIR}/bin/Debug)
    install(FILES ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll DESTINATION Debug/${PLUGIN_SUB_DIR} CONFIGURATIONS Debug)
	message(STATUS "Copy plugin DLL: " ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll)
  endif(EXISTS ${DEBUG_FILEPATH}/${DEBUG_FILENAME}.dll)
  if(EXISTS ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll)
    configure_file(${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll ${PROJECT_BINARY_DIR}/bin/Release/${PLUGIN_SUB_DIR}/${RELEASE_FILENAME}.dll COPYONLY)
    configure_file(${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll ${PROJECT_BINARY_DIR}/bin/RelWithDebInfo/${PLUGIN_SUB_DIR}/${RELEASE_FILENAME}.dll COPYONLY)
    configure_file(${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll ${PROJECT_BINARY_DIR}/bin/MinSizeRel/${PLUGIN_SUB_DIR}/${RELEASE_FILENAME}.dll COPYONLY)
    install(FILES ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll DESTINATION ./${PLUGIN_SUB_DIR} CONFIGURATIONS Release)
    install(FILES ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll DESTINATION RelWithDebInfo/${PLUGIN_SUB_DIR} CONFIGURATIONS RelWithDebInfo)
    install(FILES ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll DESTINATION MinSizeRel/${PLUGIN_SUB_DIR} CONFIGURATIONS MinSizeRel)	
	message(STATUS "Copy DLL: " ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll)
  endif(EXISTS ${RELEASE_FILEPATH}/${RELEASE_FILENAME}.dll)
endfunction(install_external_plugin_dll)

function(install_common_dll FILEPATH)
  set(FILEPATH_DBG ${FILEPATH}/Debug)
  set(FILEPATH_REL ${FILEPATH}/Release)
  set(FILENAMES ${ARGN})
  foreach(FILENAME ${FILENAMES})
    set(FILENAME_DBG ${FILENAME}d)
    set(FILENAME_REL ${FILENAME})
    install_external_dll(${FILEPATH_DBG} ${FILEPATH_REL} ${FILENAME_DBG} ${FILENAME_REL})
  endforeach(FILENAME)
endfunction(install_common_dll)

function(install_vcredist_dll)
  set(FILEPATH_DBG ${VCREDIST_DLL_DIR}/Debug)
  set(FILEPATH_REL ${VCREDIST_DLL_DIR}/Release)
  set(FILENAMES ${ARGN})
  foreach(FILENAME ${FILENAMES})
    set(FILENAME_DBG ${FILENAME}${MSVCVER}d)
	#message(STATUS "To install DLL: " ${FILEPATH_DBG}/${FILENAME_DBG}.dll)
    set(FILENAME_REL ${FILENAME}${MSVCVER})
	#message(STATUS "To install DLL: " ${FILEPATH_REL}/${FILENAME_REL}.dll)
    install_external_dll(${FILEPATH_DBG} ${FILEPATH_REL} ${FILENAME_DBG} ${FILENAME_REL})
  endforeach(FILENAME)
endfunction(install_vcredist_dll)

function(install_qt_dll QT_VER QT_DLL_DIR)
  set(FILEPATH_DBG ${QT_DLL_DIR})
  set(FILEPATH_REL ${QT_DLL_DIR})
  set(_QT_DLL_NAMES ${ARGN})
  foreach(_QT_DLL_NAME ${_QT_DLL_NAMES})
    if(${QT_VER} EQUAL 4)
      set(FILENAME_DBG Qt${_QT_DLL_NAME}d${QT_VER})
      set(FILENAME_REL Qt${_QT_DLL_NAME}${QT_VER})
    else(${QT_VER} EQUAL 4)
      set(FILENAME_DBG Qt${QT_VER}${_QT_DLL_NAME}d)
      set(FILENAME_REL Qt${QT_VER}${_QT_DLL_NAME})
    endif(${QT_VER} EQUAL 4)
    install_external_dll(${FILEPATH_DBG} ${FILEPATH_REL} ${FILENAME_DBG} ${FILENAME_REL})  
  endforeach(_QT_DLL_NAME)
endfunction(install_qt_dll)

function(install_qt_plugins QT_VER QT_PLUGIN_DIR QT_PLUGIN_SUB_DIR)
  set(FILEPATH_DBG ${QT_PLUGIN_DIR}/${QT_PLUGIN_SUB_DIR})
  set(FILEPATH_REL ${QT_PLUGIN_DIR}/${QT_PLUGIN_SUB_DIR})
  set(_QT_DLL_NAMES ${ARGN})
  foreach(_QT_DLL_NAME ${_QT_DLL_NAMES})
    if(${QT_VER} EQUAL 4)
      set(FILENAME_DBG q${_QT_DLL_NAME}d${QT_VER})
      set(FILENAME_REL q${_QT_DLL_NAME}${QT_VER})
    else(${QT_VER} EQUAL 4)
      set(FILENAME_DBG q${_QT_DLL_NAME}d)
      set(FILENAME_REL q${_QT_DLL_NAME})
    endif(${QT_VER} EQUAL 4)
    install_external_plugin_dll(${FILEPATH_DBG} ${FILEPATH_REL} ${FILENAME_DBG} ${FILENAME_REL} plugins/${QT_PLUGIN_SUB_DIR})  
  endforeach(_QT_DLL_NAME)
endfunction(install_qt_plugins)

function(install_icu_dll ICU_DLL_DIR)
  set(FILEPATH_DBG ${ICU_DLL_DIR})
  set(FILEPATH_REL ${ICU_DLL_DIR})
  set(_ICU_DLL_NAMES ${ARGN})
  foreach(_ICU_DLL_NAME ${_ICU_DLL_NAMES})
    set(FILENAME_DBG ${_ICU_DLL_NAME})
    set(FILENAME_REL ${_ICU_DLL_NAME})
    install_external_dll(${FILEPATH_DBG} ${FILEPATH_REL} ${FILENAME_DBG} ${FILENAME_REL})  
  endforeach(_ICU_DLL_NAME)  
endfunction(install_icu_dll)

function(install_vtk_dll VTK_VER VTK_DLL_DIR)
  if(EXISTS ${VTK_DLL_DIR}/Debug)
    set(FILEPATH_DBG ${VTK_DLL_DIR}/Debug)
    set(FILEPATH_REL ${VTK_DLL_DIR}/Release)
  else()
    set(FILEPATH_DBG ${VTK_DLL_DIR})
    set(FILEPATH_REL ${VTK_DLL_DIR})
  endif()
  set(_VTK_DLL_NAMES ${ARGN})
  if(VTK_VER VERSION_GREATER_EQUAL "9")
    set(_VTK_DLL_POSTFIX "d")
  else()
    set(_VTK_DLL_POSTFIX "")
  endif()
  foreach(_VTK_DLL_NAME ${_VTK_DLL_NAMES})
    string(REPLACE "VTK::" "vtk" _VTK_DLL_NAME ${_VTK_DLL_NAME})
    set(FILENAME_DBG ${_VTK_DLL_NAME}-${VTK_VER}${_VTK_DLL_POSTFIX})
    set(FILENAME_REL ${_VTK_DLL_NAME}-${VTK_VER})
    install_external_dll(${FILEPATH_DBG} ${FILEPATH_REL} ${FILENAME_DBG} ${FILENAME_REL})  
  endforeach(_VTK_DLL_NAME)  
endfunction(install_vtk_dll)

function(install_vc_manifest)
  set(DEBUG_FILEPATH ${VCREDIST_DLL_DIR}/Debug)
  set(RELEASE_FILEPATH ${VCREDIST_DLL_DIR}/Release)
  set(MODULENAMES ${ARGN})
  foreach(MODULENAME ${MODULENAMES})
    set(MANIFEST_FILENAME_DBG Microsoft.VC${MSVCVER}.Debug${MODULENAME}.manifest)
    if(EXISTS ${DEBUG_FILEPATH}/${MANIFEST_FILENAME_DBG})
      configure_file(${DEBUG_FILEPATH}/${MANIFEST_FILENAME_DBG} ${PROJECT_BINARY_DIR}/bin/Debug/${MANIFEST_FILENAME_DBG} COPYONLY)
      install(FILES ${DEBUG_FILEPATH}/${MANIFEST_FILENAME_DBG} DESTINATION Debug CONFIGURATIONS Debug)
    endif(EXISTS ${DEBUG_FILEPATH}/${MANIFEST_FILENAME_DBG})  
    set(MANIFEST_FILENAME_REL Microsoft.VC${MSVCVER}.${MODULENAME}.manifest)
    if(EXISTS ${RELEASE_FILEPATH}/${MANIFEST_FILENAME_REL})
      configure_file(${RELEASE_FILEPATH}/${MANIFEST_FILENAME_REL} ${PROJECT_BINARY_DIR}/bin/Release/${MANIFEST_FILENAME_REL} COPYONLY)
      configure_file(${RELEASE_FILEPATH}/${MANIFEST_FILENAME_REL} ${PROJECT_BINARY_DIR}/bin/RelWithDebInfo/${MANIFEST_FILENAME_REL} COPYONLY)
      configure_file(${RELEASE_FILEPATH}/${MANIFEST_FILENAME_REL} ${PROJECT_BINARY_DIR}/bin/MinSizeRel/${MANIFEST_FILENAME_REL} COPYONLY)
      install(FILES ${RELEASE_FILEPATH}/${MANIFEST_FILENAME_REL} DESTINATION . CONFIGURATIONS Release)
      install(FILES ${RELEASE_FILEPATH}/${MANIFEST_FILENAME_REL} DESTINATION RelWithDebInfo CONFIGURATIONS RelWithDebInfo)
      install(FILES ${RELEASE_FILEPATH}/${MANIFEST_FILENAME_REL} DESTINATION MinSizeRel CONFIGURATIONS MinSizeRel)
    endif(EXISTS ${RELEASE_FILEPATH}/${MANIFEST_FILENAME_REL})
  endforeach(MODULENAME)
endfunction(install_vc_manifest)

